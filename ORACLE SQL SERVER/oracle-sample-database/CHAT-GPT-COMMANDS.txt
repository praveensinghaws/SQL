https://www.oracletutorial.com/getting-started/oracle-sample-database/

--------------------------------------------------------------------------------------
-- Name	       : OT (Oracle Tutorial) Sample Database
-- Link	       : http://www.oracletutorial.com/oracle-sample-database/
-- Version     : 1.0
-- Last Updated: July-28-2017
-- Copyright   : Copyright Â© 2017 by www.oracletutorial.com. All Rights Reserved.
-- Notice      : Use this sample database for the educational purpose only.
--               Credit the site oracletutorial.com explitly in your materials that
--               use this sample database.
--------------------------------------------------------------------------------------
--------------------------------------------------------------------
-- execute the following statements to create a user name OT and
-- grant priviledges
--------------------------------------------------------------------

-- create new user
CREATE USER OT IDENTIFIED BY yourpassword;

-- grant priviledges
GRANT CONNECT, RESOURCE, DBA TO OT;

---------------------------------------------------------------------
-------------------------------------------------------------------

-- Create a sequence for region_id
CREATE SEQUENCE regions_seq START WITH 5;

-- regions
CREATE TABLE regions
  (
    region_id NUMBER PRIMARY KEY,
    region_name VARCHAR2( 50 ) NOT NULL
  );

-- Create a trigger to populate region_id using the sequence
CREATE OR REPLACE TRIGGER regions_trigger
BEFORE INSERT ON regions
FOR EACH ROW
BEGIN
  :NEW.region_id := regions_seq.NEXTVAL;
END;
/


-- Create a sequence for location_id
CREATE SEQUENCE locations_seq START WITH 24;

-- locations
CREATE TABLE locations
  (
    location_id NUMBER PRIMARY KEY,
    address     VARCHAR2( 255 ) NOT NULL,
    postal_code VARCHAR2( 20 )          ,
    city        VARCHAR2( 50 )          ,
    state       VARCHAR2( 50 )          ,
    country_id  CHAR( 2 )               , -- fk
    CONSTRAINT fk_locations_countries 
      FOREIGN KEY( country_id )
      REFERENCES countries( country_id ) 
      ON DELETE CASCADE
  );

-- Create a trigger to populate location_id using the sequence
CREATE OR REPLACE TRIGGER locations_trigger
BEFORE INSERT ON locations
FOR EACH ROW
BEGIN
  :NEW.location_id := locations_seq.NEXTVAL;
END;
/

-- Create a sequence for warehouse_id
CREATE SEQUENCE warehouses_seq START WITH 10;

-- warehouses
CREATE TABLE warehouses
  (
    warehouse_id NUMBER PRIMARY KEY,
    warehouse_name VARCHAR( 255 ) ,
    location_id    NUMBER( 12, 0 ), -- fk
    CONSTRAINT fk_warehouses_locations 
      FOREIGN KEY( location_id )
      REFERENCES locations( location_id ) 
      ON DELETE CASCADE
  );

-- Create a trigger to populate warehouse_id using the sequence
CREATE OR REPLACE TRIGGER warehouses_trigger
BEFORE INSERT ON warehouses
FOR EACH ROW
BEGIN
  :NEW.warehouse_id := warehouses_seq.NEXTVAL;
END;
/

-- Create a sequence for employee_id
CREATE SEQUENCE employees_seq START WITH 108;

-- employees
CREATE TABLE employees
  (
    employee_id NUMBER PRIMARY KEY,
    first_name VARCHAR( 255 ) NOT NULL,
    last_name  VARCHAR( 255 ) NOT NULL,
    email      VARCHAR( 255 ) NOT NULL,
    phone      VARCHAR( 50 ) NOT NULL ,
    hire_date  DATE NOT NULL          ,
    manager_id NUMBER( 12, 0 )        , -- fk
    job_title  VARCHAR( 255 ) NOT NULL,
    CONSTRAINT fk_employees_manager 
        FOREIGN KEY( manager_id )
        REFERENCES employees( employee_id )
        ON DELETE CASCADE
  );

-- Create a trigger to populate employee_id using the sequence
CREATE OR REPLACE TRIGGER employees_trigger
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
  :NEW.employee_id := employees_seq.NEXTVAL;
END;
/

-- Create a sequence for category_id
CREATE SEQUENCE category_seq START WITH 6;

-- product category
CREATE TABLE product_categories
  (
    category_id NUMBER PRIMARY KEY,
    category_name VARCHAR2( 255 ) NOT NULL
  );

-- Create a trigger to populate category_id using the sequence
CREATE OR REPLACE TRIGGER category_trigger
BEFORE INSERT ON product_categories
FOR EACH ROW
BEGIN
  :NEW.category_id := category_seq.NEXTVAL;
END;
/


-- Create a sequence for product_id
CREATE SEQUENCE product_seq START WITH 289;

-- products table
CREATE TABLE products
  (
    product_id NUMBER PRIMARY KEY,
    product_name VARCHAR2( 255 ) NOT NULL,
    description VARCHAR2( 2000 ),
    standard_cost NUMBER( 9, 2 ),
    list_price NUMBER( 9, 2 ),
    category_id NUMBER NOT NULL,
    CONSTRAINT fk_products_categories 
      FOREIGN KEY( category_id )
      REFERENCES product_categories( category_id ) 
      ON DELETE CASCADE
  );

-- Create a trigger to populate product_id using the sequence
CREATE OR REPLACE TRIGGER product_trigger
BEFORE INSERT ON products
FOR EACH ROW
BEGIN
  :NEW.product_id := product_seq.NEXTVAL;
END;
/

-- Create a sequence for customer_id
CREATE SEQUENCE customer_seq START WITH 320;

-- customers table
CREATE TABLE customers
  (
    customer_id NUMBER PRIMARY KEY,
    name         VARCHAR2( 255 ) NOT NULL,
    address      VARCHAR2( 255 ),
    website      VARCHAR2( 255 ),
    credit_limit NUMBER( 8, 2 )
  );

-- Create a trigger to populate customer_id using the sequence
CREATE OR REPLACE TRIGGER customer_trigger
BEFORE INSERT ON customers
FOR EACH ROW
BEGIN
  :NEW.customer_id := customer_seq.NEXTVAL;
END;
/

-- Create a sequence for contact_id
CREATE SEQUENCE contact_seq START WITH 320;

-- contacts table
CREATE TABLE contacts
  (
    contact_id NUMBER PRIMARY KEY,
    first_name  VARCHAR2( 255 ) NOT NULL,
    last_name   VARCHAR2( 255 ) NOT NULL,
    email       VARCHAR2( 255 ) NOT NULL,
    phone       VARCHAR2( 20 ),
    customer_id NUMBER,
    CONSTRAINT fk_contacts_customers 
      FOREIGN KEY( customer_id )
      REFERENCES customers( customer_id ) 
      ON DELETE CASCADE
  );

-- Create a trigger to populate contact_id using the sequence
CREATE OR REPLACE TRIGGER contact_trigger
BEFORE INSERT ON contacts
FOR EACH ROW
BEGIN
  :NEW.contact_id := contact_seq.NEXTVAL;
END;
/

-- Create a sequence for order_id
CREATE SEQUENCE order_seq START WITH 106;

-- orders table
CREATE TABLE orders
  (
    order_id NUMBER PRIMARY KEY,
    customer_id NUMBER( 6, 0 ) NOT NULL,
    status      VARCHAR( 20 ) NOT NULL ,
    salesman_id NUMBER( 6, 0 ),
    order_date  DATE NOT NULL,
    CONSTRAINT fk_orders_customers 
      FOREIGN KEY( customer_id )
      REFERENCES customers( customer_id )
      ON DELETE CASCADE,
    CONSTRAINT fk_orders_employees 
      FOREIGN KEY( salesman_id )
      REFERENCES employees( employee_id ) 
      ON DELETE SET NULL
  );

-- Create a trigger to populate order_id using the sequence
CREATE OR REPLACE TRIGGER order_trigger
BEFORE INSERT ON orders
FOR EACH ROW
BEGIN
  :NEW.order_id := order_seq.NEXTVAL;
END;
/

-- Create a sequence for order_item_id
CREATE SEQUENCE order_item_seq;

-- order items table
CREATE TABLE order_items
  (
    order_id   NUMBER( 12, 0 ),
    item_id    NUMBER( 12, 0 ) PRIMARY KEY,
    product_id NUMBER( 12, 0 ) NOT NULL,
    quantity   NUMBER( 8, 2 ) NOT NULL,
    unit_price NUMBER( 8, 2 ) NOT NULL,
    CONSTRAINT fk_order_items_products 
      FOREIGN KEY( product_id )
      REFERENCES products( product_id ) 
      ON DELETE CASCADE,
    CONSTRAINT fk_order_items_orders 
      FOREIGN KEY( order_id )
      REFERENCES orders( order_id ) 
      ON DELETE CASCADE
  );

-- Create a trigger to populate item_id using the sequence
CREATE OR REPLACE TRIGGER order_item_trigger
BEFORE INSERT ON order_items
FOR EACH ROW
BEGIN
  :NEW.item_id := order_item_seq.NEXTVAL;
END;
/

-- inventories table
CREATE TABLE inventories
  (
    product_id   NUMBER( 12, 0 ),
    warehouse_id NUMBER( 12, 0 ),
    quantity     NUMBER( 8, 0 ) NOT NULL,
    CONSTRAINT pk_inventories 
      PRIMARY KEY( product_id, warehouse_id ),
    CONSTRAINT fk_inventories_products 
      FOREIGN KEY( product_id )
      REFERENCES products( product_id ) 
      ON DELETE CASCADE,
    CONSTRAINT fk_inventories_warehouses 
      FOREIGN KEY( warehouse_id )
      REFERENCES warehouses( warehouse_id ) 
      ON DELETE CASCADE
  );
--------------------------------------------------------------------
--------------------------------------------------------------------
